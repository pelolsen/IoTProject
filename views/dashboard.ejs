<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="../public/css/styles.css">
</head>
<body>
    <header class="nav-down">
        <div style = "width: 20%; height: 100%;">
            <div class="page-title"> CrowdSense </div>
        </div>
        <div style = "width:60%; height: 100%;">

        </div>
        <div style = "width: 20%; height: 100%;">

        </div>
    </header>
    <main>
        <div style="display: flex;">
            <div style="width: 20%;">
     
            </div>
           <div style="width: 80%;">
            <div style="width: 100%; height: 40px;">
                <div class="section-title"> Audience </div>
            </div>
            <div class="dashboard">
                <div class="card">
                  <div class="card-header">Ingress</div>
                  <div class="card-content increase"><%= counts.in %></div>
                  <div style="height: 50%;  padding-top: 50px;"><canvas id="smting"></canvas></div>
                </div>
              
                <div class="card">
                  <div class="card-header">Egress</div>
                  <div class="card-content decrease"><%= counts.out %></div>
                  <div style="height: 50%;  padding-top: 50px;"><canvas id="egressChart"></canvas></div>
                </div>
              
                <div class="card">
                  <div class="card-header">Live Occupancy</div>
                  <div class="card-content"><%= counts.inside %></div>
                  <div><canvas id="myChart"></canvas></div>
                </div>
              
                <div class="card" style="display: flex;"">
                    <div style="width: 60%;">
                        <div class="card-header">Temperature</div>
                        <div class="card-content increase" style="padding-bottom: 20px;">22°C ↑ +0,2°C</div>
                    </div>
                    <div style="width: 40%; justify-content: center; ">
                        <div style="height: 100px; width: 100px;">
                            <img src="../public/images/cloudy.png" alt="Temperature" style="width: 100%; height: 100%;">
                        </div>
                    </div>
                </div>
                <div class="card" style="display: flex;"">
                    <div style="width: 60%;">
                        <div class="card-header">Humidity</div>
                        <div class="card-content decrease" style="padding-bottom: 20px;">65.4% ↓ +5%</div>
                    </div>
                    <div style="width: 40%; justify-content: center; ">
                        <div style="height: 100px; width: 100px;">
                            <img src="../public/images/humidity.png" alt="Temperature" style="width: 80%; height: 80%; padding-top: 10px; padding-left: 25px;">
                        </div>
                    </div>
                </div>
                <div class="card" style="display: flex;"">
                    <div style="width: 60%;">
                        <div class="card-header">Pressure</div>
                        <div class="card-content decrease" style="padding-bottom: 20px;">1107 hPa ↓ -10</div>
                    </div>
                    <div style="width: 40%; justify-content: center; ">
                        <div style="height: 100px; width: 100px;">
                            <img src="../public/images/atmospheric.png" alt="Temperature" style="width: 80%; height: 80%; padding-top: 10px; padding-left: 25px;">
                        </div>
                    </div>
                </div>
                
            </div>
           </div>
        </div>
    </main>
</body>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <script>
    const ctx = document.getElementById('myChart');
    const smting = document.getElementById('smting');
    const egressChart = document.getElementById('egressChart');
    const timestamps = <%- JSON.stringify(counts.timestamps) %>;
    const peopleCounts = <%- JSON.stringify(counts.peopleCounts) %>;
    const egressCounts = <%- JSON.stringify(counts.egressCounts) %>;
    const ingressCounts = <%- JSON.stringify(counts.ingressCounts) %>;
    timestamps.push("Now")
    peopleCounts.push(<%= counts.inside %>)
    egressCounts.push(<%= counts.lastHourEgress %>)
    ingressCounts.push(<%= counts.lastHourIngress %>)
    new Chart(ctx, {
      type: 'line',
      data: {
        labels: timestamps,
        datasets: [{
          label: 'People inside',
          data: peopleCounts,
          borderWidth: 1,
          fill: true
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
    new Chart(smting, {
    type: 'line',
    data: {
      labels: timestamps,
      datasets: [{
        label: 'People inside',
        data: ingressCounts,
        borderWidth: 1,
        borderColor: 'rgba(17, 214, 43, 1)',
        backgroundColor: 'rgba(17, 214, 43, 0.2)',
        fill: true,
        tension: 0.4,
        // Hides the point labels on the line
        pointRadius: 0,
        pointHitRadius: 20,
        pointHoverRadius: 5,
      }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          // Hide Y axis labels and ticks
          ticks: {
            display: false // This will remove the Y axis labels (the tick labels)
          },
          grid: {
            drawBorder: false, // This removes the Y axis line
            display: false // This removes the Y axis grid lines
          }
        },
        x: {
          // Hide X axis labels and ticks
          ticks: {
            display: false // This will remove the X axis labels (the tick labels)
          },
          grid: {
            drawBorder: false, // This removes the X axis line
            display: false // This removes the X axis grid lines
          }
        }
      },
      plugins: {
        legend: {
          display: false // This will hide the dataset label that's shown on top like a legend.
        }
      },
      elements: {
        line: {
          tension: 0 // This will make the line straight; set it to a value between 0 and 1 for some curve.
        },
        hover: {
          mode: 'nearest',
          intersect: true
        }
      },
      layout: {
        padding: {
          left: -10,
          right: 0,
          top: 0,
          bottom: 0
        },
        borderRadius:{
            topLeft: 10,
            topRight: 10,
            bottomLeft: 10,
            bottomRight: 10
        }
      }
    }
  });

  new Chart(egressChart, {
    type: 'line',
    data: {
      labels: timestamps,
      datasets: [{
        label: 'People inside',
        data: egressCounts,
        borderWidth: 1,
        borderColor: 'rgba(227, 34, 34, 1)',
        backgroundColor: 'rgba(227, 34, 34, 0.2)',
        fill: true,
        tension: 0.4,
        // Hides the point labels on the line
        pointRadius: 0,
        pointHitRadius: 20,
        pointHoverRadius: 5,
      }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          // Hide Y axis labels and ticks
          ticks: {
            display: false // This will remove the Y axis labels (the tick labels)
          },
          grid: {
            drawBorder: false, // This removes the Y axis line
            display: false // This removes the Y axis grid lines
          }
        },
        x: {
          // Hide X axis labels and ticks
          ticks: {
            display: false // This will remove the X axis labels (the tick labels)
          },
          grid: {
            drawBorder: false, // This removes the X axis line
            display: false // This removes the X axis grid lines
          }
        }
      },
      plugins: {
        legend: {
          display: false // This will hide the dataset label that's shown on top like a legend.
        }
      },
      elements: {
        line: {
          tension: 0 // This will make the line straight; set it to a value between 0 and 1 for some curve.
        },
        hover: {
          mode: 'nearest',
          intersect: true
        }
      },
      layout: {
        padding: {
          left: -10,
          right: 0,
          top: 0,
          bottom: 0
        },
        borderRadius:{
            topLeft: 10,
            topRight: 10,
            bottomLeft: 10,
            bottomRight: 10
        }
      }
    }
  });
  </script>
  <script>
    // Hide Header on on scroll down
        var didScroll;
        var lastScrollTop = 0;
        var delta = 5;
        var navbarHeight = $('header').outerHeight();

        $(window).scroll(function(event){
            didScroll = true;
        });

        setInterval(function() {
            if (didScroll) {
                hasScrolled();
                didScroll = false;
            }
        }, 250);

        function hasScrolled() {
            var st = $(this).scrollTop();
            
            // Make sure they scroll more than delta
            if(Math.abs(lastScrollTop - st) <= delta)
                return;
            
            // If they scrolled down and are past the navbar, add class .nav-up.
            // This is necessary so you never see what is "behind" the navbar.
            if (st > lastScrollTop && st > navbarHeight){
                // Scroll Down
                $('header').removeClass('nav-down').addClass('nav-up');
            } else {
                // Scroll Up
                if(st + $(window).height() < $(document).height()) {
                    $('header').removeClass('nav-up').addClass('nav-down');
                }
            }
            
            lastScrollTop = st;
        }
  </script>
  <script>
    function sendRequest() {
      // Creating a new date object for the timestamp
      var now = new Date();
      
      // Preparing the JSON data with the current timestamp and direction "In"
      var data = JSON.stringify({
        "TimeStamp": now.toISOString(),
        "Direction": "In"
      });
    
      // Creating a new XMLHttpRequest
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "http://localhost:3000/data", true);
      xhr.setRequestHeader("Content-Type", "application/json");
    
      // Setting up what happens when the request is successful
      xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
          console.log('Success:', xhr.responseText);
        } else {
          console.error('Request failed with status:', xhr.status);
        }
      };
    
      // Sending the request with the data
      xhr.send(data);
    }
    function sendOutRequest() {
      // Creating a new date object for the timestamp
      var now = new Date();
      
      // Preparing the JSON data with the current timestamp and direction "In"
      var data = JSON.stringify({
        "TimeStamp": now.toISOString(),
        "Direction": "Out"
      });
    
      // Creating a new XMLHttpRequest
      var xhr = new XMLHttpRequest();
      xhr.open("POST", "http://localhost:3000/data", true);
      xhr.setRequestHeader("Content-Type", "application/json");
    
      // Setting up what happens when the request is successful
      xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
          console.log('Success:', xhr.responseText);
        } else {
          console.error('Request failed with status:', xhr.status);
        }
      };
    
      // Sending the request with the data
      xhr.send(data);
    }
    </script>

</html>